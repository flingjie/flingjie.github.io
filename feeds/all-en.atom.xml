<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A Pelican Blog</title><link href="/" rel="alternate"></link><link href="/feeds/all-en.atom.xml" rel="self"></link><id>/</id><updated>2015-11-26T23:39:11+00:00</updated><entry><title>交办的艺术笔记</title><link href="/jiao-ban-de-yi-zhu-bi-ji.html" rel="alternate"></link><updated>2015-11-26T23:39:11+00:00</updated><author><name></name></author><id>tag:,2015-11-26:jiao-ban-de-yi-zhu-bi-ji.html</id><summary type="html">&lt;p&gt;真正培养优秀员工的方法,就是将工作交给他们,让他们在摸索和犯错中,锻炼自
己的能力.要定期追踪他们的进度,以开放式的问题将他们引导到正确的方向,不
要随意干涉,并且要为他们提供适当的支持与资源.&lt;/p&gt;
&lt;h2&gt;当主管第一件要学的事&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;放手让他做，他就会成材
*交办失败，会摧毁一个人&lt;/li&gt;
&lt;li&gt;扭转“无法交办”心态的诀窍&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;在做中学，你硬塞给他就对了&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;交办工作，不用等到“对他有信心”&lt;/li&gt;
&lt;li&gt;成长，都是被逼出来的&lt;/li&gt;
&lt;li&gt;你得保障他失败的权利&lt;/li&gt;
&lt;li&gt;想培养他，就从“分外”的工作开始&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;硬塞前，先慎选人与事&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;交付的是“责任”，而不只是“工作”&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;三种工作，千万别突然硬塞&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;陌生的工作&lt;/li&gt;
&lt;li&gt;非紧急重要事项&lt;/li&gt;
&lt;li&gt;指派人力的工作&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;任命主管，你得会看人&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;交办，要注意方式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;交办时，务必说清楚、想明白&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自愿，是交办的前提&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;他有没有个人目标，会影响工作成败&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不合理的工作，交给谁最好？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;他不是你的复制品，做法不一样也别急&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;提高要求，让他发挥到极致&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不要求，就不叫栽培&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你不推卸责任，他就能学会负责&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;严格要求一定要，体恤恶夜不能少&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面向未来，将过去归零&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;他做的时候，不随便干预&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用人不疑，疑人不用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你强给意见，他就不会思考了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你一催促、建议，他的自主性就会受影响&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;想提醒他，这样说有效，那样说就只有反效果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;定期沟通，就一定能保障进度&lt;/h2&gt;</summary></entry><entry><title>想当厨子的生物学家是个好黑客笔记</title><link href="/xiang-dang-chu-zi-de-sheng-wu-xue-jia-shi-ge-hao-hei-ke-bi-ji.html" rel="alternate"></link><updated>2015-11-25T22:58:09+00:00</updated><author><name></name></author><id>tag:,2015-11-25:xiang-dang-chu-zi-de-sheng-wu-xue-jia-shi-ge-hao-hei-ke-bi-ji.html</id><summary type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在厨房里检测家族遗传病&lt;br /&gt;
   用高压电源和热循环仪复制DNA片段.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外行人也能生物创新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;他们也是黑客 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检测三聚氰胺的科学素养 &lt;br /&gt;
   水母体内有一种能让它在黑暗中发光的基因,把这个基因剪接到做酸奶用的细菌
里,并在里面加一个控制基因转录的结构,使三聚氰胺可以诱导这个基因开始表达.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在野外诊断传染病&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;仪器也开源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;农业是黑客的巅峰之作 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;让人类开源 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实验必然有风险 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;癌症厨房研究院 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你的DNA到底是什么意思 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生命可以编写 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;事关人命, 非常严肃 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面对危险,万分谨慎 &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本书故事性较强,动手性不强,适合作为科普读物. 其中&lt;em&gt;DIYbio&lt;/em&gt;和&lt;em&gt;biocurious&lt;/em&gt;这两
个网站可以关注下.&lt;/p&gt;</summary></entry><entry><title>Note on CSS Mastery</title><link href="/note-on-css-mastery.html" rel="alternate"></link><updated>2015-11-22T23:35:58+00:00</updated><author><name></name></author><id>tag:,2015-11-22:note-on-css-mastery.html</id><summary type="html">&lt;h2&gt;Setting the foundations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Structing your code&lt;/li&gt;
&lt;li&gt;Use meaningful markup&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Visual formatting model recap&lt;/h2&gt;
&lt;p&gt;&lt;img alt="box model" src="images/box_model.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Background images and image replacement&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;#branding&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sx"&gt;url(/images/branding.gif)&lt;/span&gt; &lt;span class="k"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Styling links&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;href&lt;/span&gt;&lt;span class="o"&gt;^=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(images/externalLink.gif)&lt;/span&gt; &lt;span class="k"&gt;no-repeat&lt;/span&gt; &lt;span class="k"&gt;right&lt;/span&gt; &lt;span class="k"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding-right&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Styling lists and creating nav bars&lt;/h2&gt;
&lt;h4&gt;add image to list&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(bullet.git)&lt;/span&gt; &lt;span class="k"&gt;no-repeat&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding-left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;navbar&lt;/h4&gt;
&lt;p&gt;文本&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;样式&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;list-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;720px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#EAA819&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;float&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Styling forms and data tables&lt;/h2&gt;
&lt;h2&gt;Layout&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;html&lt;/li&gt;
&lt;li&gt;body&lt;/li&gt;
&lt;li&gt;table&lt;/li&gt;
&lt;li&gt;tr, td&lt;/li&gt;
&lt;li&gt;iframe&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Hacks and Filters&lt;/h2&gt;
&lt;h2&gt;Bugs and bug fixing&lt;/h2&gt;</summary></entry><entry><title>Note on Sectets of the Javascript Ninja</title><link href="/note-on-sectets-of-the-javascript-ninja.html" rel="alternate"></link><updated>2015-11-22T13:53:52+00:00</updated><author><name></name></author><id>tag:,2015-11-22:note-on-sectets-of-the-javascript-ninja.html</id><summary type="html">&lt;h2&gt;Enter the ninja&lt;/h2&gt;
&lt;p&gt;Javascript consists of a close relationship between objects, functions
and closures.
&lt;img alt="javascript" src="images/javascript.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Arming with testing and debugging&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;opera&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;postError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;opera&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nx"&gt;catche&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Functions are fundamental&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The scope of declaration within a function differs from that of most
  other languages. Specifically:&lt;/li&gt;
&lt;li&gt;Variables within a function are in scope from their point of
     declaration to the end of the function, spanning block
     boundaries.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inner named functions are available anywhere within the enclosing
     function, even as forward references.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The parameters list of a function and its actual argument list can
  be of different lengths:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Unassigned parameters evaluate as undefined.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extra arguments are simply not bound to parameter names.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each function invocation is passed two implicit parameter names&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;arguments, a collection of the actual passed arguments&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;this, a reference to the object of the object serving as the
     function context&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Functions can be invoked in various ways, and the invocation
  mechanism determines the function context value:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;when invoked as a simple function, the context is the global
     object(window).&lt;/li&gt;
&lt;li&gt;When invoked as a method, the contect is the object owning the
     method.&lt;/li&gt;
&lt;li&gt;When invoked as a constructor, the context is a newly allocated
     object.&lt;/li&gt;
&lt;li&gt;When invoked via the apply() or call() methods of the function,
     the context can be whatever the heck we want.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Wielding functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Anonymous functions let us create smaller units of execution rather
  than large functions full of imperative statements.&lt;/li&gt;
&lt;li&gt;Functions can have properties and those properties can be used to
  store any information we might wish to use.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Closing in on closures&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Binding function context&lt;/li&gt;
&lt;li&gt;Partially applying functions&lt;/li&gt;
&lt;li&gt;Overriding function behavior&lt;/li&gt;
&lt;li&gt;Immediate function
  :::javascript
  (function(){})()&lt;/li&gt;
&lt;li&gt;Temporary scope and private variables&lt;/li&gt;
&lt;li&gt;Loops&lt;/li&gt;
&lt;li&gt;Library wrapping&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Object-orientation with prototypes&lt;/h2&gt;
&lt;p&gt;&lt;img alt="prototype" src="images/js_prototype.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Wrangling regular expressions&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;re1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/test/i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;re2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;RegExp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Taming threads and timers&lt;/h2&gt;
&lt;p&gt;&lt;img alt="timer" src="images/js_timer.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Ninja alchemy:runtime code evaluation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;eval()&lt;/code&gt; to create runtime code evalution&lt;/li&gt;
&lt;li&gt;Json conversion&lt;/li&gt;
&lt;li&gt;moving definitions between namespaces&lt;/li&gt;
&lt;li&gt;minimization and obfuscation of Javascript code&lt;/li&gt;
&lt;li&gt;dynamic code rewriting and injection&lt;/li&gt;
&lt;li&gt;creating metalanguages&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;With statements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The use of &lt;code&gt;with&lt;/code&gt; should be avoid.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Developing cross-browser strategies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Reusable cross-browser development involves juggling three factors:&lt;/li&gt;
&lt;li&gt;Code size -- Keeping the file size small&lt;/li&gt;
&lt;li&gt;Performance overhead -- Keeping the performance level above a
     palatable minimum&lt;/li&gt;
&lt;li&gt;API quality -- Making sure that the APIs provided work uniformly
     across browsers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Cutting through attributes, porperties, and CSS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Versions of IE prior to IE 9 don't allow the type attribute of
  &amp;lt;input&gt; elements to be changed once the element is part of the DOM&lt;/li&gt;
&lt;li&gt;The style attribute poses some unique challenges and doesn't contain
  the computed style for the element&lt;/li&gt;
&lt;li&gt;Computed style can be fetched from the window using standardized API
  in modern browsers, and via a proprietary property on IE 8 and
  earlier&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Surviving events&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;addEventListener()&lt;/li&gt;
&lt;li&gt;removeEventListener()&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Manipulating the DOM&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Injecting HTML into a page&lt;/li&gt;
&lt;li&gt;Cloning elements&lt;/li&gt;
&lt;li&gt;Removing elements&lt;/li&gt;
&lt;li&gt;Manipulating element text&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;CSS selector engines&lt;/h2&gt;</summary></entry><entry><title>笔记</title><link href="/bi-ji.html" rel="alternate"></link><updated>2015-11-20T22:03:37+00:00</updated><author><name></name></author><id>tag:,2015-11-20:bi-ji.html</id><summary type="html">&lt;h2&gt;互联网医疗之美国篇&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Medical American" src="images/美国医疗.png" /&gt;&lt;/p&gt;
&lt;h2&gt;互联网医疗之中国篇&lt;/h2&gt;
&lt;h4&gt;三问中国互联网医疗&lt;/h4&gt;
&lt;p&gt;1.一问互联网医疗: 进入后流量时代?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互联网发展逐渐成熟后,更加注重个性化需求, 产品会更加分化专注于某类
     特点,要大众化一窝蜂的模式不太可能.&lt;/li&gt;
&lt;li&gt;医疗不同于其他领域,需求本身更加专业和细分.&lt;/li&gt;
&lt;li&gt;后流量时代意味着快速积聚人气然后通过平台效应或者广告盈利的方式不
     太可能.&lt;/li&gt;
&lt;li&gt;个人是相对吝啬的,健康是需要花钱的, 移动医疗不应该由个人用户来买单.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.二问互联网医疗:如何找到付费方?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;美国移动医疗的快速发展主要得益于保险公司和雇主这两大支付方,个人很
     少在这一领域进行支出. 而在中国,完全缺乏上述的服务链.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.三问互联网医疗:大平台没有优势?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;医疗不是软需求,用户不会被广告吸引去花钱.&lt;/li&gt;
&lt;li&gt;正因为用户要求很实际,解决了问题就走,解决不了就找其他,现在的大平台
     并不能高枕无忧,后来者也不是没有机会.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;概要&lt;/h4&gt;
&lt;p&gt;&lt;img alt="中国互联网医疗" src="images/中国医疗.png" /&gt;&lt;/p&gt;</summary></entry><entry><title>Principles by Ray Dalio</title><link href="/principles-by-ray-dalio.html" rel="alternate"></link><updated>2015-11-01T22:23:53+00:00</updated><author><name></name></author><id>tag:,2015-11-01:principles-by-ray-dalio.html</id><summary type="html">&lt;p&gt;Ray Dalio is a great fund manager and the founder of the investment firm
  Bridgewater Associates. In 2012, Dalio appeared on the annual Time
  100 list of the 100 most influential people in the world. This book
  is about his fundamental and management principles.&lt;/p&gt;
&lt;h3&gt;The Importance of Priciples&lt;/h3&gt;
&lt;p&gt;Part 1 introduce the 3W1H of principles(What, Why Important, Where
come from, How work).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are principles?&lt;br /&gt;
  Priciples are the guide that help one make decisions and take actions.
  When one face hard choices, he will turn to his principles.
  Principles are important to one's life.&lt;/li&gt;
&lt;li&gt;Why are principles important?&lt;br /&gt;
  Without principles, one would be forced to react to
  circumstances randomly. As a result, one can't foucs on his goal,
  and can't get what he want. Principles determine how to interact
  with the reality.&lt;/li&gt;
&lt;li&gt;Where do principles come from?&lt;br /&gt;
  People can forge one's own principles, or accept other's and
  holistic packages of principles, such as religion and legal systems.
  The key is,  principles should reflect the values one really
  believe in.&lt;/li&gt;
&lt;li&gt;How well do you think principles will work, and why?&lt;br /&gt;
  By thinking and learning from one's experience, one can have his
  most valuable priciples, which can be applied to similar occasions
  in the future. When face hard choices, one need to refine his principles
  and become better.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;My Most Fundamental Life Principles&lt;/h3&gt;
&lt;p&gt;Part 2 explain the author's fundamental Life Principles. List as follow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Truth --more precisely, an accurate understanding of reality-- is
  the essential foundation for producing good outcomes.&lt;br /&gt;
  Seeking truth from facts, learning from experience. By looking at the way the world works and figuring out how to
  operate in harmony with it to help it(and oneself) evolve. This
  evolution is the natural movement toward better adaptation. And the
  desire to evolve is probably humanity's most pervasive driving force.&lt;/li&gt;
&lt;li&gt;The Personal Evolutionary Process&lt;br /&gt;
&lt;img alt="process" src="/images/process.png" /&gt;&lt;br /&gt;
  This is the personal evolutionary process that fulfills
  most of people and moves society forward. As people and society are
  generally symbiotic, when people push themself to do the things that
  benefit them and contribute to society, in return, society rewards
  those who give what it wants. &lt;/li&gt;
&lt;li&gt;Reality + Dreams + Determination = A Successful Life&lt;br /&gt;
  People have to make a lot of decisions in their life. And the
  quality of life depends on the quality of the decisions they
  make.People not born to good at making decisions, they need to
  learn. Here list five decision trees to show five key types of
  choices.&lt;br /&gt;
&lt;img alt="choice1" src="/images/choice1.png" /&gt;&lt;br /&gt;
It is a fundamental law of nature that to evolve one has to push one's
  limit, which is painful, in order to gain strength--whether it's in
  the form of lifting weights, facing problems head-on, or in any
  other way. Nature give us pain as a messaging device to tell us that
  we are approaching, or that we have exceeded, our limit is in some
  way. At the same time, nature made the process of getting stronger
  require us to push out limits, which is painful. In other words,
  both pain and strength typically result from encountering one's
  barriers. When we encounter pain, we are at an important juncture in
  our decision-making process.&lt;br /&gt;
&lt;img alt="choice2" src="/images/choice2.png" /&gt;&lt;br /&gt;
Face harsh realities, then find ways of properly dealing with them.&lt;br /&gt;
&lt;img alt="choice3" src="/images/choice3.png" /&gt;&lt;br /&gt;
Don't just worry about looking good, face one's weaknesses, accept
  these weaknesses and don't let them stand in the way to success.&lt;br /&gt;
&lt;img alt="choice4" src="/images/choice4.png" /&gt;&lt;br /&gt;
Quite often the first-order consequeces are the temptations that cost
  us what we really want, and sometimes they are barries that stand in
  the way to getting what we really want. Think three times, then make
  the right decision.&lt;br /&gt;
&lt;strong&gt;Fifth:&lt;/strong&gt;&lt;br /&gt;
&lt;img alt="choice5" src="/images/choice5.png" /&gt;&lt;br /&gt;
Bad things come at everyone, and success come after dealing with them.
  Great people know that nature is testing them, and that it is not sympathetic.
Here above are just some of choices we may face in the life. There
  are lots of other choices one will face and need to choose. So, one
  should think carefully, take the right one and learn from them. The quality of life depends on the quality of the decisions we make.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Your Two Yous and Your Machine&lt;br /&gt;
  It's about higer level thinking. The perspective is of one who
  looking down on at the machine and oneself objectively. One should
  step back and design, operate and improve the "machine" to achieve
  the goal.&lt;br /&gt;
&lt;img alt="machine" src="/images/machine.png" /&gt;&lt;br /&gt;
    Think of it as though there are two yous--you as the designer and
  overseer of the plan to achieve your goals(you1) and you as one of
  the participants in pursuing that mission(you2). You2 are a resource
  that you1 have to get what you1 want, but by no means your only
  resource. To be successfull you1 have to be objective about you2.
  The biggest mistakes people make is to not see themselves and others objectively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5-step Process to Getting What You Want Out of Life&lt;br /&gt;
  By and large, life will give you what deserve and it doesn't give a
  damn what you "like". So it is up to you to take full responsibility
  to connect what you want with whatn you need to do to get it, and
  then to do those things--which often are difficult but produce good
  results--so that you'll then deserve to get what you want.
&lt;img alt="5step" src="/images/5step.png" /&gt;&lt;br /&gt;
When setting goal, one should know what he want, without confusing
  goals with desires, and without limiting because of fear. After
 knowing the goal, one can visualize it. Then prioritize the goal,
  rejecting other good alternatives if necessary.&lt;br /&gt;
When identifying problems, one should remain centered and logical,
  perceive problems, not tolerate them.&lt;br /&gt;
When diagnosing the problems, one should get at the root causes, and see
  multiple possibilities, and willing to touch people's nerves to
  overcome the ego barries that stand in the way of truth.&lt;br /&gt;
When designing the plan, one should visualize the goal or problem
  standing in the way, and then visualize practical solutions.&lt;br /&gt;
When doing tasks to archive the goals, one should be
  self-disciplined, proactive, results-oriented, and have good work
  habits.&lt;br /&gt;
The 5-step process is iterative, one should operate this process again
  and again.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;My Management Principles&lt;/h6&gt;
&lt;p&gt;Part 3 explain the author's management principles. They reflect the
principles the fundamental principles. The 5-step process are as
follow:
&lt;img alt="group" src="/images/group.png" /&gt;
And the evolutionary process is as follows.
&lt;img alt="culture" src="/images/culture.png" /&gt;&lt;br /&gt;
Different from people, group have culture not design. Culure and people are the core of a group.&lt;/p&gt;
&lt;p&gt;And, here comes list the table of management principles.
&lt;img alt="Principles" src="/images/Principles.png" /&gt;&lt;/p&gt;
&lt;p&gt;The mindmap above is only a summary of the principle table. There are 210
principles list in the book. They will be useful in the life and
management, but not easy to digest and absorb as one's own principles. &lt;/p&gt;
&lt;p&gt;It's a tiny and interesting book, the content is concise and useful.
Part 2 (the fundamental principles) is my favorite part. In my view,
the core in this book is to tell you to be an independent thinker,
make mistakes and learning from experience. &lt;/p&gt;</summary></entry><entry><title>Configure Https</title><link href="/configure-https.html" rel="alternate"></link><updated>2015-10-10T16:35:59+00:00</updated><author><name></name></author><id>tag:,2015-10-10:configure-https.html</id><summary type="html">&lt;p&gt;Https just means "http with ssl". In order to enable SSL, we need a
certificate which is either self-signed or signed by an external
Cerificate Authority. A self-signed certificate need to be imported
when browsing. For easy-to-use purposes, use an external cerificate
here. &lt;a href="http://www.startssl.com/"&gt;http://www.startssl.com/&lt;/a&gt; and
&lt;a href="https://buy.wosign.com/"&gt;https://buy.wosign.com/&lt;/a&gt; are two sites for
buying cerificate. I use
&lt;a href="https://buy.wosign.com/"&gt;https://buy.wosign.com/&lt;/a&gt; here.&lt;/p&gt;
&lt;p&gt;For e-commerce websites, use OV(Organization Verified) SSL. For
financial websites, use EV(Extended Verified) SSL.&lt;/p&gt;
&lt;h5&gt;Enable in Nginx&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;server {
    listen 443 ssl;

    server_name example.com;    
    ssl_certificate /etc/ssl/private/example.com_bundle.crt;
    ssl_certificate_key /etc/ssl/private/example.com.key;

    ...
}
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Vim Tips</title><link href="/vim-tips.html" rel="alternate"></link><updated>2015-02-06T22:31:15+00:00</updated><author><name></name></author><id>tag:,2015-02-06:vim-tips.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;缩进： 10 &amp;gt;&amp;gt;&lt;/li&gt;
&lt;li&gt;宏： qa q @a&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Vim for Rails</title><link href="/vim-for-rails.html" rel="alternate"></link><updated>2014-05-27T01:35:30+00:00</updated><author><name></name></author><id>tag:,2014-05-27:vim-for-rails.html</id><summary type="html">&lt;p&gt;使用vim来进行Rails开发，对配置过程略做记录，前提vim已安装完毕。 &lt;br /&gt;
1、 &lt;strong&gt;安装pathogen&lt;/strong&gt; &lt;br /&gt;
pathogens是vim的插件管理工具，可简化对vim插件的管理。 &lt;br /&gt;
安装如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p ~/.vim/autoload ~/.vim/bundle; \
curl -LSso ~/.vim/autoload/pathogen.vim \
    https://raw.github.com/tpope/vim-pathogen/master/autoload/pathogen.vim;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后在&lt;code&gt;.vimrc&lt;/code&gt;中加入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;execute pathogen#infect()
&amp;quot; 加在下列配置之前
syntax on
filetype plugin indent on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2、 &lt;strong&gt;rails.vim&lt;/strong&gt; &lt;br /&gt;
rails插件，无需多介绍。 &lt;br /&gt;
常用快捷键:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;gf           =&amp;gt;  跳转到定义
ctrl+6       =&amp;gt;  返回上一文件
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;常用命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 查找文件&lt;/span&gt;
&lt;span class="ss"&gt;:Rfind&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;

&lt;span class="c1"&gt;# 打开model&lt;/span&gt;
&lt;span class="ss"&gt;:Rmodel&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;

&lt;span class="c1"&gt;# 打开controller&lt;/span&gt;
&lt;span class="ss"&gt;:Rcontroller&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;
&lt;span class="ss"&gt;:Rcont&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt;

&lt;span class="c1"&gt;# 打开view&lt;/span&gt;
&lt;span class="ss"&gt;:Rview&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;
&lt;span class="ss"&gt;:Rview&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_user&lt;/span&gt;

&lt;span class="c1"&gt;# 启动server&lt;/span&gt;
&lt;span class="ss"&gt;:Rserver&lt;/span&gt;
&lt;span class="c1"&gt;# 关闭server&lt;/span&gt;
&lt;span class="ss"&gt;:Rserver!&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;

&lt;span class="c1"&gt;# 打开js文件&lt;/span&gt;
&lt;span class="ss"&gt;:Rjavascript&lt;/span&gt; &lt;span class="n"&gt;js_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;:其&lt;code&gt;Rtag&lt;/code&gt;命令使用的是&lt;code&gt;exuberant-ctags&lt;/code&gt;中的&lt;code&gt;ctags&lt;/code&gt;，安装Emacs后也会安装一个&lt;code&gt;ctag&lt;/code&gt;工具，会与之冲突，可以将Emacs的&lt;code&gt;ctags&lt;/code&gt;重命名后安装&lt;code&gt;exuberant-ctags&lt;/code&gt;解决之。&lt;/p&gt;
&lt;p&gt;3、 &lt;strong&gt;nerdtree&lt;/strong&gt; &lt;br /&gt;
显示目录树，命令&lt;code&gt;:NERDTree&lt;/code&gt;显示目录。   &lt;/p&gt;
&lt;p&gt;4、 &lt;strong&gt;vim-surround&lt;/strong&gt; &lt;br /&gt;
方便输入括号等的插件，使用&lt;code&gt;ctrl+g s =&lt;/code&gt;，即可插入&lt;code&gt;&amp;lt;%=  %&amp;gt;&lt;/code&gt;。   &lt;/p&gt;
&lt;p&gt;5、 &lt;strong&gt;sparkup&lt;/strong&gt; &lt;br /&gt;
html编写插件，输入&lt;code&gt;div#header&lt;/code&gt;，然后按&lt;code&gt;ctrl+e&lt;/code&gt;，就会扩展为
&lt;code&gt;&amp;lt;div id="header"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;6、 &lt;strong&gt;snipmate&lt;/strong&gt; &lt;br /&gt;
代码片段补全&lt;/p&gt;
&lt;p&gt;7、 &lt;strong&gt;neocomplcache&lt;/strong&gt; &lt;br /&gt;
代码补全提示&lt;/p&gt;
&lt;p&gt;8、 &lt;strong&gt;auto-pairs&lt;/strong&gt; &lt;br /&gt;
括号自动补全&lt;/p&gt;</summary></entry><entry><title>Metaprogramming(code generator)</title><link href="/metaprogrammingcode-generator.html" rel="alternate"></link><updated>2014-05-03T19:23:53+00:00</updated><author><name></name></author><id>tag:,2014-05-03:metaprogrammingcode-generator.html</id><summary type="html">&lt;p&gt;根本没有什么元编程，只有编程！？
&lt;br&gt;
&lt;img alt="CodeWriter" src="/images/CodeWriter.png" /&gt;
&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注1: 由于代码字符串和块非常相似，因此，在很多情况下，可以选择使用任
  意一种。但是，一般情况下，只要能用块就尽量用块。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注2: 使一个模块可以通过钩子方法扩展它的包含者。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;M&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;included&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ClassMethods&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ClassMethods&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_method&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;a class method&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;
  &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;   &lt;span class="c1"&gt;# =&amp;gt;  &amp;quot;a class method&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Meta programming(Class)</title><link href="/meta-programmingclass.html" rel="alternate"></link><updated>2014-05-03T17:51:04+00:00</updated><author><name></name></author><id>tag:,2014-05-03:meta-programmingclass.html</id><summary type="html">&lt;p&gt;在Ruby中，使用class定义类时，实际上是在运行代码，这与java之类的静态语
言有很大的差别。  &lt;br /&gt;
另外，类只是一个增强的模块，因此，任何适用于类的东西也
适用于模块。
&lt;br&gt;
&lt;img alt="Object Definitions" src="/images/ObjectDefinitions.png" /&gt;
&lt;br&gt;
 * 注1:在类(或模块)定义时，类本身充当了当前对象self的角色。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;
  &lt;span class="nb"&gt;self&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;result&lt;/span&gt;     &lt;span class="c1"&gt;# =&amp;gt;  MyClass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注2:Ruby中总是存在一个当前对象self，与此类似，也总是存在一个当前类
   （或模块）。每当通过class关键字来打开一个类时，这个类就成为当前类，
   但是使用class关键字需要一个类的名字。
   如果只有一个类的引用，需要用class_eval()方法打开这个类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注3：类实例变量仅仅是属于Class类对象的普通实例变量。它仅仅可以被类
   本身所访问，而不能被类的实例或之类所访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注4：类方法的实质，它们只是一个类的单件方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注5: 在类定义中使用一个类方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注6: eigenclass是一个对象特有的隐藏类，它是单件方法存在的地方。Ruby中可以使用如下语法进入eigenclass的作用域。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;an_object&lt;/span&gt; 
  &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注7: 如果对象是eigenclass，那么Ruby不是从它所在的类开始，而是从这个
   eigenclass类中开始查找方法，如图。
   &lt;br&gt;
   &lt;img alt="Eigenclass" src="/images/eigenclassMethod.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注8: 一个对象的eigenclass的超类是这个对象的类，一个类的eigenclass的
   超类是这个类的超类的eigenclass,如图。
   &lt;img alt="eigenclassInherit" src="/images/eigenclassInherit.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注9: 通过向类的eigenclass中混入模块来定义类方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注10: 通过给一个对象的eigenclass混入模块来定义单件方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注11: 1. 给方法定义一个别名；2.重新定义这个方法；3.在新的方法中调用老的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注12: 1.环绕别名是一种猴子补丁，可能会破坏已有代码。2.你永远不该把一个环绕别名加载两次。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Metaprogramming(Block)</title><link href="/metaprogrammingblock.html" rel="alternate"></link><updated>2014-05-03T17:06:28+00:00</updated><author><name></name></author><id>tag:,2014-05-03:metaprogrammingblock.html</id><summary type="html">&lt;p&gt;块继承自“函数式编程语言(functional programming languages)”的世界。
&lt;br&gt;
&lt;img alt="blocks" src="/images/blocks.png" /&gt;
&lt;br&gt;
* 注1: 在一个方法中，可以向Ruby询问当前的方法调用是否包含块。这可以通
  过Kernel#block_given?()方法来做到。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注2: 如果在一个扁平作用域中定义了多个方法，这这些方法可以用一个作用
  域们进行保护，并共享绑定，这种技术称为共享作用域。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注3: 传递给instance_eval()方法的块称为一个上下文探针，因为它就像是一
  个深入到对象中的代码片段，对其操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="vi"&gt;@x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a private instance variable&amp;quot;&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance_eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#=&amp;gt;&amp;quot;a private instance variable&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;注4: 有时，你会创建一个对象，仅仅是为了在其中执行块。这样的对象称为洁净室。洁净室仅仅是一个用来执行块的环境，它通常还会暴露若干有用的方法供块调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CleanRoom&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a_useful_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;CleanRoom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance_eval&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a_useful_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;  &lt;span class="c1"&gt;#=&amp;gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注5: 1.return方式不同。lambda从可调用对象中返回，而proc从原始上下文中返回。
2.参数检查方式不同。如果lambda的产生数量不对，这它会失败，同时抛出一个
ArgumentError错误；而proc则会自动调整传递进来的参数，通过忽略多余的参
数以及为未赋值参数置nil。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注6: Method对象类似于lambda，但是有一个重要的区别：lambda在它的作用域中执行(它是一个闭包)，而Method对象会在它自身所在对象的作用域中执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Metaprogramming(Methods)</title><link href="/metaprogrammingmethods.html" rel="alternate"></link><updated>2014-05-03T16:44:19+00:00</updated><author><name></name></author><id>tag:,2014-05-03:metaprogrammingmethods.html</id><summary type="html">&lt;p&gt;Ruby是动态语言，没有静态类型检查，同时也提供了很多java等静态语言无法提
供的编程技巧。本章主要专注于消除重复代码的技巧，通过用两种不同的方式对一
段代码的重构来展示Ruby的强大功能，涉及的知识点比较少。
&lt;br&gt;
&lt;img alt="methods" src="/images/methods.png" /&gt;
&lt;br&gt;
* 注1: method_missing()是Kernel中的一个实例方法，当Ruby找不到调用的方
  法时，它最后就会调用这个名为method_missing()的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注2: 移除一个对象中的所有方法，以便把它们转换成幽灵方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;重构例子&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 原始代码&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Computer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;computer_id&lt;/span&gt;
    &lt;span class="vi"&gt;@data_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_source&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mouse&lt;/span&gt;
    &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@data_source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_mouse_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@data_source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_mouse_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mouse: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ($&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;* &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cpu&lt;/span&gt;
    &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@data_source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cpu_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@data_source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cpu_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Cpu: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ($&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;* &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;keyboard&lt;/span&gt;
    &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@data_source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_keyboard_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@data_source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_keyboard_price&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Keyboard: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ($&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;* &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 使用动态方法重构&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Computer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;computer_id&lt;/span&gt;
    &lt;span class="vi"&gt;@data_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_source&lt;/span&gt;
    &lt;span class="c1"&gt;# 使用内省方式提取所有组件的名字&lt;/span&gt;
    &lt;span class="n"&gt;data_source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^get_(.*)_info$/&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="no"&gt;Computer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define_component&lt;/span&gt; &lt;span class="vg"&gt;$1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define_component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# 使用define_method()动态定义方法&lt;/span&gt;
    &lt;span class="n"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="c1"&gt;# 使用send()方法集中处理&lt;/span&gt;
      &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@data_source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;get_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@id&lt;/span&gt;
      &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@data_source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;get_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_price&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@id&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ($&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;* &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;define_component&lt;/span&gt; &lt;span class="ss"&gt;:mouse&lt;/span&gt;
  &lt;span class="n"&gt;define_component&lt;/span&gt; &lt;span class="ss"&gt;:cpu&lt;/span&gt;
  &lt;span class="n"&gt;define_component&lt;/span&gt; &lt;span class="ss"&gt;:keyboard&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 使用幽灵方法重构&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Computer&lt;/span&gt;
  &lt;span class="c1"&gt;# 创建白板， 以免方法命名冲突&lt;/span&gt;
  &lt;span class="nb"&gt;instance_methods&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;undef_method&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/^__|method_missing|respond_to?/&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_source&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;computer_id&lt;/span&gt;
    &lt;span class="vi"&gt;@data_source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_source&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# 在method_missing()中创建方法&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_missing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@data_source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;get_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@data_source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;get_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_price&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;capitalize&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; ($&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;* &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# 覆写respond_to?()，保证查询方法时返回正确结果&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@data_source&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;respond_to?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;get_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nb"&gt;method&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Metaprogramming(ObjectModel)</title><link href="/metaprogrammingobjectmodel.html" rel="alternate"></link><updated>2014-05-02T20:44:57+00:00</updated><author><name></name></author><id>tag:,2014-05-02:metaprogrammingobjectmodel.html</id><summary type="html">&lt;p&gt;在Ruby程序中，除了对象之外，还有类、模块以及实例变量这些语言构件。这
些语言构件存在于其中的系统称为&lt;strong&gt;对象模型&lt;/strong&gt;。在对象模型中，你可以找到诸
如"这个方法来自哪个类"和"当我包含这个模块是会发生什么"此类问题的答案。
&lt;br&gt;
&lt;img alt="ObjectModel" src="/images/ObjectModel.png" /&gt;
&lt;br&gt;
* 注1: class关键字更像是一个作用域操作符而不是类型声明语句，它的确可以
  创建一个还不存在的类，不过也可以把这看成是一个副作用。对于class关键
  字，其核心任务是把你带到类的上下文中，让你可以在其中定义方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注2: 修改已有类的特性时，由于粗心导致bug，像这种鲁莽的修改方式被称为
  猴子补丁。不过，如果是正确的运行打开类这种技术，猴子补丁也可以表示为
  一个褒义词，会很有用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注3: 对象是一组实例变量外加一个指向其类的引用。对象的方法并不存在于对象本身，而是存在于对象的类中。在类中，这些方法被称为类的实例方法。
类是一个对象（Class类的一个实例）外加一组实例方法和一个对其超类的引用。
值得注意的是，实例变量存放在对象中，而方法存放在类中，比如&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_method&lt;/span&gt;
    &lt;span class="vi"&gt;@v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;              &lt;span class="c1"&gt;# =&amp;gt; MyClass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面代码结构可表示为：
&lt;img alt="ObjectClass" src="/images/ObjectClass.png" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注4: 一个类只不过是一个增强的Module，它只是在Module基础上增加了三个
  方法——new()、allocate()和superclass()而已，结构如下。
  &lt;img alt="ModuleClass" src="/images/ModuleClass.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注5: 每个类都有一个祖先链，这个链从自己所属的类开始，向上直到BasicObject结束。其中，Object类包含了Kernel模块，故Kernel方法对所有对象可用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Metaprogramming(Tutorial)</title><link href="/metaprogrammingtutorial.html" rel="alternate"></link><updated>2014-04-29T21:56:38+00:00</updated><author><name></name></author><id>tag:,2014-04-29:metaprogrammingtutorial.html</id><summary type="html">&lt;p&gt;元编程(Metaprogramming)，简单来说，就是写出编写代码的代码。正式的定义为：编写在运行时操纵语言构件的代码。
Ruby是一门对元编程支持很强大的语言(只是比lisp弱一点)，而且，元编程
也是通向Ruby的高级编程之路。可以说，除非掌握了元编程否则不能算是真正掌
握了Ruby。
下图简要总结了&lt;Ruby元编程&gt;的基本内容，经验有限，不足之处请多指正。
&lt;br&gt;
&lt;img alt="RubyMetaprogramming" src="/images/RubyMetaprogramming.png" /&gt;
&lt;br&gt; 
就如蜘蛛侠大叔曾经说的，能力越大，责任越大。元编程赋予了你强大的能力，同时也意味着你需要肩负更大的责任。&lt;/p&gt;</summary></entry><entry><title>A* Algorithm</title><link href="/a-algorithm.html" rel="alternate"></link><updated>2014-04-22T18:10:18+00:00</updated><author><name></name></author><id>tag:,2014-04-22:a-algorithm.html</id><summary type="html">&lt;p&gt;A*算法是一种经典的启发式搜索算法,公式表示为：f(n)=g(n)+h(n)，其中f(n)
是从初始点到目标点的估价函数，g(n)是从初始点到节点n的代价，h(n)是从节
点n到目标节点的估计代价，保证找到最短路径关键在于估价函数h(n)的选取。  &lt;br /&gt;
一、几个相关知识：  &lt;br /&gt;
&lt;strong&gt;启发式搜索&lt;/strong&gt;：启发式搜索就是在状态空间中的搜索对每一个搜索的位置进行评估，得到最好的位置，再从这个位置进行搜索直到目标。这样可以省略大量无畏的搜索路径，提到了效率。在启发式搜索中，对位置的估价是十分重要的。采用了不同的估价可以有不同的效果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;估价函数&lt;/strong&gt;：从当前节点移动到目标节点的预估费用；这个估计就是启发式的。在寻路问题和迷宫问题中，我们通常用曼哈顿（manhattan）估价函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A*算法的特点&lt;/strong&gt;：A*算法在理论上是时间最优的，但是也有缺点：它的空间增长是指数级别的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A*算法与BFS&lt;/strong&gt;：可以这样说，BFS是A&lt;em&gt;算法的一个特例。对于一个BFS算法，从当前节点扩展出来的每一个节点（如果没有被访问过的话）都要放进队列进行进一步扩展。也就是说BFS的估计函数h永远等于0，没有一点启发式的信息，可以认为BFS是“最烂的”A&lt;/em&gt;算法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IDA*算法&lt;/strong&gt;：这种算法被称为迭代加深A&lt;em&gt;算法，可以有效的解决A&lt;/em&gt;空间增长带来的问题，甚至可以不用到优先级队列。&lt;/p&gt;
&lt;p&gt;二、A*伪代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;startNode&lt;/span&gt; &lt;span class="nx"&gt;onto&lt;/span&gt; &lt;span class="nx"&gt;openList&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;openList&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;goal&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;

        &lt;span class="nx"&gt;remove&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;openList&lt;/span&gt;
        &lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt; &lt;span class="nx"&gt;onto&lt;/span&gt; &lt;span class="nx"&gt;closedList&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;each&lt;/span&gt; &lt;span class="nx"&gt;neighbor&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;negighbors&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;neighbor&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;openList&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;save&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;
                &lt;span class="nx"&gt;save&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;
                &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="nx"&gt;neighbor&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;openList&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;neighbor&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;openList&lt;/span&gt;
                &lt;span class="nx"&gt;And&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;better&lt;/span&gt; &lt;span class="nx"&gt;than&lt;/span&gt; &lt;span class="nx"&gt;previous&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;save&lt;/span&gt; &lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;
                &lt;span class="nx"&gt;save&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="nx"&gt;parent&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;三、coffeescript实现&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;astar =&lt;/span&gt;
    &lt;span class="nv"&gt;init: &lt;/span&gt;&lt;span class="nf"&gt;(grid) -&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nv"&gt;f = &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
                &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nv"&gt;g = &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
                &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nv"&gt;h = &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
                &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nv"&gt;debug = &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
                &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nv"&gt;parent = &lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;

    &lt;span class="nv"&gt;search: &lt;/span&gt;&lt;span class="nf"&gt;(grid, start, end) -&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;astar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;

        &lt;span class="nv"&gt;openList = &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="nv"&gt;closeList = &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="nx"&gt;openList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;openList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

            &lt;span class="c1"&gt;# 获取最小的f(x)的点&lt;/span&gt;
            &lt;span class="nv"&gt;lowInd = &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;openList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="nv"&gt;lowInd = &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;openList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;openList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lowInd&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;
            &lt;span class="nv"&gt;currentNode = &lt;/span&gt;&lt;span class="nx"&gt;openList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lowInd&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

            &lt;span class="c1"&gt;# 到达目标点，返回路径&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;
                &lt;span class="nv"&gt;curr = &lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;
                &lt;span class="nv"&gt;ret = &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
                &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;
                    &lt;span class="nx"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;curr&lt;/span&gt;
                    &lt;span class="nv"&gt;curr = &lt;/span&gt;&lt;span class="nx"&gt;curr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parent&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="c1"&gt;# 最短路径搜索过程&lt;/span&gt;
            &lt;span class="c1"&gt;# 将当前点从openList移至closeList&lt;/span&gt;
            &lt;span class="c1"&gt;# 处理当前点的每个相邻点&lt;/span&gt;
            &lt;span class="nx"&gt;openList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeGraphNode&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;
            &lt;span class="nx"&gt;closeList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;
            &lt;span class="nv"&gt;neightbors = &lt;/span&gt;&lt;span class="nx"&gt;astar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;neighbors&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentNode&lt;/span&gt;

            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;neighbors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="nv"&gt;neighbor = &lt;/span&gt;&lt;span class="nx"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;closeList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findGraphNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isWall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="c1"&gt;# 无效点，跳至下一个相邻点&lt;/span&gt;
                    &lt;span class="k"&gt;continue&lt;/span&gt;

                &lt;span class="c1"&gt;# gScore 是起始点到当前点所经过的距离&lt;/span&gt;
                &lt;span class="c1"&gt;# 需要判断当前相邻是否是最短距离&lt;/span&gt;
                &lt;span class="nv"&gt;gScore = &lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# 1是当前点到相邻点的距离&lt;/span&gt;
                &lt;span class="nv"&gt;gScoreIsBest = &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;openList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findGraphNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="c1"&gt;# 第一次到达当前点， 它必是当前最短距离&lt;/span&gt;
                    &lt;span class="c1"&gt;# 并且，需要计算 h(x) &lt;/span&gt;
                    &lt;span class="nv"&gt;gScoreIsBest = &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
                    &lt;span class="nv"&gt;neighbor.h = &lt;/span&gt;&lt;span class="nx"&gt;astar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;heuristic&lt;/span&gt; &lt;span class="nx"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;
                    &lt;span class="nx"&gt;openList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;neighbor&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;gScore&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt;
                    &lt;span class="c1"&gt;# 已经到达过该点，并且路径短于上次&lt;/span&gt;
                    &lt;span class="nv"&gt;gScoreIsBest = &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;gScoreIsBest&lt;/span&gt;
                    &lt;span class="c1"&gt;# 找到当前的最短路径，将它保存起来&lt;/span&gt;
                    &lt;span class="nv"&gt;neighbor.parent = &lt;/span&gt;&lt;span class="nx"&gt;currentNode&lt;/span&gt;
                    &lt;span class="nv"&gt;neighbor.g = &lt;/span&gt;&lt;span class="nx"&gt;gScore&lt;/span&gt;
                    &lt;span class="nv"&gt;neighbor.f = &lt;/span&gt;&lt;span class="nx"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;
                    &lt;span class="nv"&gt;neighbor.debug = &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;F: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                        &lt;span class="s"&gt;&amp;quot;&amp;lt;br/&amp;gt;G: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;g&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;br/&amp;gt;H:&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;

        &lt;span class="c1"&gt;# 未找到最短路径，返回空&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="nv"&gt;heuristic: &lt;/span&gt;&lt;span class="nf"&gt;(pos0, pos1) -&amp;gt;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pos1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;pos0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pos1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;pos0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nv"&gt;neighbors: &lt;/span&gt;&lt;span class="nf"&gt;(grid, node) -&amp;gt;&lt;/span&gt;
        &lt;span class="nv"&gt;ret = &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="nv"&gt;x = &lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;
        &lt;span class="nv"&gt;y = &lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;

        &lt;span class="nx"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; 
        &lt;span class="nx"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; 
        &lt;span class="nx"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; 
        &lt;span class="nx"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考： &lt;br /&gt;
&lt;a href="http://en.wikipedia.org/wiki/A*_search_algorithm#Algorithm_description"&gt;A* search algorithm description on wiki&lt;/a&gt; &lt;br /&gt;
&lt;a href="http://www.briangrinstead.com/blog/astar-search-algorithm-in-javascript"&gt;astar-search-algorithm-in-javascript&lt;/a&gt; &lt;br /&gt;
&lt;a href="http://qiao.github.io/PathFinding.js/visual/"&gt;vistual PathFinding.js&lt;/a&gt;  &lt;br /&gt;
&lt;a href="http://www.cppblog.com/mythit/archive/2009/04/19/80492.aspx"&gt;A*算法入门&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Configure Emacs for clojure</title><link href="/configure-emacs-for-clojure.html" rel="alternate"></link><updated>2014-03-29T10:39:00+00:00</updated><author><name></name></author><id>tag:,2014-03-29:configure-emacs-for-clojure.html</id><summary type="html">&lt;p&gt;1.&lt;strong&gt;使用环境&lt;/strong&gt;：
ubuntu12.04 + emacs24 + leiningen2.3.4&lt;/p&gt;
&lt;p&gt;2.&lt;strong&gt;配置emacs&lt;/strong&gt; &lt;br /&gt;
  a.添加package地址，在&lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;中加入：   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;package&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt; &lt;span class="ss"&gt;&amp;#39;package-archives&lt;/span&gt;
             &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;marmalade&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://marmalade-repo.org/packages/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-initialize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;b.安装相关插件，在&lt;code&gt;~/.emacs.d/init.el&lt;/code&gt;中加入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defvar&lt;/span&gt; &lt;span class="nv"&gt;my-packages&lt;/span&gt; &lt;span class="o"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;starter-kit&lt;/span&gt;
                      &lt;span class="nv"&gt;starter-kit-lisp&lt;/span&gt;
                      &lt;span class="nv"&gt;starter-kit-bindings&lt;/span&gt;
                      &lt;span class="nv"&gt;starter-kit-eshell&lt;/span&gt;
                      &lt;span class="nv"&gt;clojure-mode&lt;/span&gt;
                      &lt;span class="nv"&gt;clojure-test-mode&lt;/span&gt;
                      &lt;span class="nv"&gt;cider&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dolist&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="nv"&gt;my-packages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-installed-p&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;package-install&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.&lt;strong&gt;编辑相关操作&lt;/strong&gt; &lt;br /&gt;
a.文件、窗口操作&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C-x C-f    打开文件
C-x C-s    保存文件
C-x b      切换buffer
C-x k      关闭当前buffer
C-x o      切换到下一buffer
C-x 0      隐藏当前buffer
C-x 1      隐藏其他buffer
C-x 2      垂直分割窗口
C-x 3      水平分割窗口
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;b.移动操作&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C-a    移动到行头
C-e    移动到行尾
C-n    移动到下一行
C-p    移动到上一行
C-b    向后移动一个字符
C-f    向前移动一个字符
M-f    向前移动一个单词
M-b    向后移动一个单词
C-v    向下翻页
M-v    向上翻页
M-&amp;lt;    移动到buffer开头
M-&amp;gt;    移动到buffer末尾
C-M-f  移动到后一个括号
C-M-f  移动到前一个括号
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;c.编辑操作&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C-d        删除一个字符
M-d        删除一个单词
C-k        删除一行
C-w        删除选中区域
M-w        复制选中区域
C-y        粘帖
C-j        换行

C-M-Space  选中光标所在的S表达式
C-M-t      交换连个S表达式位置
M-1 (      在当前S表达式外添加一对括号
M-s        删除当前S表达式外的一对括号
M-r        删除当前S表达式外的一对括号(包括内容)
C-)        将后面的括号向后移动一个元素
           (a b (c d) e f) -&amp;gt; (a b (c d e) f)
C-}        将后面的括号向前移动一个元素
           (a b (c d) e f) -&amp;gt; (a b (c) d e f)
C-(        将前面的括号向前移动一个元素
C-{        将前面的括号向后移动一个元素
C-M-q      代码对齐
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;d.帮助操作&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C-h b    查看当前的key绑定
C-h m    查看当前的编辑模式
C-h a    查找一个关键词的相关帮助
C-h k    查看一个key的绑定
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.&lt;strong&gt;编译相关操作&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C-c M-j    cider-jack-in,启动nREPL
C-c C-e    执行s表达式
C-c C-r    执行当前选中区
C-c C-z    运行lisp进程
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5.&lt;strong&gt;宏操作&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C-x (   ;;开始录制宏
...     ;;输入操作
C-x )   ;;结束录制
C-x e   ;;执行宏
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Recursive Clojure</title><link href="/recursive-clojure.html" rel="alternate"></link><updated>2014-03-18T21:23:52+00:00</updated><author><name></name></author><id>tag:,2014-03-18:recursive-clojure.html</id><summary type="html">&lt;p&gt;一般函数可以通过调用自身来实现递归的效果，但这种方式会消耗栈有导致栈
溢出。比如下面这个计算阶乘的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;recur-fac&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;recur-fac&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dec &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通常，可以改写成尾递归的方式来避免消耗栈导致栈溢出，改写如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;recur-fac&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;letfn&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;fac&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="nv"&gt;r&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nv"&gt;r&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fac&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dec &lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="nv"&gt;r&lt;/span&gt;&lt;span class="p"&gt;))))]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fac&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的写法使用了尾递归，在common lisp的语言中可以达到尾递归优化(TCO)，
问题是clojure是基于JVM，无法支持完全的TCO，这主要是Java的安全模型决定
的。还好Clojue也支持同一个函数体直接调用自身的TCO，只是要使用clojure的
特殊形式，即使用recur关键字。改写如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;recur-fac&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;letfn&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="nf"&gt;fac&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="nv"&gt;r&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nv"&gt;r&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;recur&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dec &lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="nv"&gt;r&lt;/span&gt;&lt;span class="p"&gt;))))]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;fac&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;好了，这样修改后，就不会有栈溢出的危险了。
上述例子是在同一个函数中进行自身调用，如果要在两个函数中相互调用则需要
用到trampoline，使用如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;declare &lt;/span&gt;&lt;span class="nv"&gt;is-odd?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;is-even?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;true&lt;/span&gt;
        &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;is-odd?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dec &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;defn &lt;/span&gt;&lt;span class="nv"&gt;is-odd?&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;false&lt;/span&gt;
        &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;is-even?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dec &lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;调用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;trampoline is-odd? 10000000&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;false&lt;/span&gt;
&lt;span class="nv"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;trampoline is-even? 10000&lt;span class="o"&gt;)&lt;/span&gt;  
&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Description in Python</title><link href="/description-in-python.html" rel="alternate"></link><updated>2014-03-15T16:27:32+00:00</updated><author><name></name></author><id>tag:,2014-03-15:description-in-python.html</id><summary type="html">&lt;p&gt;在python中一个描述器就是定义下面的方法中一个或多个的一个对象：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;
&lt;span class="n"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;__delete__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果一个对象同时定义了&lt;code&gt;__get__()&lt;/code&gt;和&lt;code&gt;__set__()&lt;/code&gt;，它叫做资料描述器。只定义了&lt;code&gt;__get__()&lt;/code&gt;的描述器叫做非资料描述器(一般用于方法)。
资料描述器和非资料描述器的区别在于：相对于实例字典的优先级。如果实例字典中有与资料描述器同名的属性，优先使用资料描述器中的；如果实例字典中有与非资料描述器中同名的属性，优先使用实例字典中的。即优先级 资料描述器 &amp;gt; 实例字典 &amp;gt; 非资料描述器。 &lt;br /&gt;
要想写一个只读的资料描述器，只需同时定义&lt;code&gt;__get__()&lt;/code&gt;和&lt;code&gt;__set__()&lt;/code&gt;并在&lt;code&gt;__set__()&lt;/code&gt;中抛出一个&lt;code&gt;AttributeError&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;描述器的调用&lt;/strong&gt; &lt;br /&gt;
描述器可以直接这么调用：&lt;code&gt;descriptor.__get__(obj)&lt;/code&gt;，不过一般都是用来拦截对实例属性的访问。 &lt;br /&gt;
描述器的调用规则如下：   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__get__(self, instance, owner)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descriptor&lt;/span&gt;         &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;descriptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;OwnerClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;OwnerClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descriptor&lt;/span&gt;  &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;  &lt;span class="n"&gt;descriptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OwnerClass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__set__(self, instance, value)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descriptor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;  &lt;span class="n"&gt;descriptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__delete__(self, instance)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;descriptor&lt;/span&gt;     &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt;  &lt;span class="n"&gt;descriptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__delete__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;参考资料：&lt;/em&gt; &lt;br /&gt;
&lt;a href="http://openhome.cc/Gossip/Python/Descriptor.html"&gt;Python Gossip: 描述器&lt;/a&gt; &lt;br /&gt;
&lt;a href="https://pyzh.readthedocs.org/en/latest/Descriptor-HOW-TO-Guide.html"&gt;Python描述器引导&lt;/a&gt; &lt;br /&gt;
&lt;a href="http://docs.python.org/2/howto/descriptor.html"&gt;Descriptor HowTo Guide&lt;/a&gt; &lt;br /&gt;
&lt;a href="http://me.veekun.com/blog/2012/05/23/python-faq-descriptors/"&gt;Python descriptor&lt;/a&gt; &lt;br /&gt;
&lt;a href="http://me.veekun.com/blog/2012/05/23/python-faq-descriptors/"&gt;Python FAQ: Descriptors&lt;/a&gt;   &lt;/p&gt;</summary></entry><entry><title>Context manager in Python</title><link href="/context-manager-in-python.html" rel="alternate"></link><updated>2014-03-14T17:13:46+00:00</updated><author><name></name></author><id>tag:,2014-03-14:context-manager-in-python.html</id><summary type="html">&lt;p&gt;上下文管理器(context manager)是Python2.5开始支持的一种语法，用于处理指
定代码块进入和退出时的操作。一般使用with语法，也可以直接调用相应的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;with语句&lt;/strong&gt; &lt;br /&gt;
with语句是用来简化“try/finally”语句的，通常用于处理共享资源的获取和
释放，比如文件、数据库和线程资源。它的用法如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;VAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EXPR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;BLOCK&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其相当于进行了如下操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;VAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EXPR&lt;/span&gt;
&lt;span class="n"&gt;VAR&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;BLOCK&lt;/span&gt;
&lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;VAR&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例子如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_ty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc_tb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;{}: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;counting&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000000&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c"&gt;#  counting: 0.933553934097&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;也可利用@contextmanager装饰器改写如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;contextlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;contextmanager&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="nd"&gt;@contextmanager&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;{}: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;counting&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000000&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="c"&gt;# counting: 0.947228908539&lt;/span&gt;

&lt;span class="c"&gt;# 其中yield之前的所有代码都类似于__enter__方法的内容。而yield之后的所有&lt;/span&gt;
&lt;span class="c"&gt;# 代码类似__exit__方法的内容。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Decroator in Python</title><link href="/decroator-in-python.html" rel="alternate"></link><updated>2014-03-14T15:00:56+00:00</updated><author><name></name></author><id>tag:,2014-03-14:decroator-in-python.html</id><summary type="html">&lt;p&gt;装饰器的作用是在原有对象的基础上添加额外功能。python中可以将函数作为参
数，进行装饰，返回经过修饰过的函数，比如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*** wrapper ***&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;*** wrapper ***&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;origin_fn&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;--- origin ---&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;decorated_fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;origin_fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;decorated_fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;python可以使用语法糖@来达到相同的作用，例子如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makebold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;b&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;/b&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;makeitalic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;i&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;/i&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;

&lt;span class="nd"&gt;@makebold&lt;/span&gt;
&lt;span class="nd"&gt;@makeitalic&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;helloworld&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;helloworld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;## return &amp;lt;b&amp;gt;&amp;lt;i&amp;gt;helloworld&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Generator in Python</title><link href="/generator-in-python.html" rel="alternate"></link><updated>2014-03-14T11:52:54+00:00</updated><author><name></name></author><id>tag:,2014-03-14:generator-in-python.html</id><summary type="html">&lt;p&gt;生成器是可以当作iterator使用的特殊函数。它有以下优点： &lt;br /&gt;
1. 惰性求值； &lt;br /&gt;
2. 在处理大的列表时不需要一次性加载全部数据，可以减小内存使用； &lt;br /&gt;
除非特殊的原因，应该在代码中使用生成器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生成器(generator) vs 函数(function)&lt;/strong&gt; &lt;br /&gt;
生成器和函数的主要区别在于函数return a value, 生成器yield a value同时
记录以便在下次调用时从上次的状态下恢复执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生成器(generator) vs 迭代器(iterator)&lt;/strong&gt; &lt;br /&gt;
 * 迭代器是一个更一般的概念，它是一个有next方法和返回self的__iter__方
法的类。 &lt;br /&gt;
 * 每个生成器是一个迭代器，但迭代器不一定是生成器，生成器是有记录上次
 执行状态的迭代器。从这点上看生成器有点像闭包，只是它记录的不是数据
 的状态，记录的是执行过程中的状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;生成器(generator) vs 续延(coninuations)&lt;/strong&gt;
与生成器相比，续延更加灵活，续延允许你调用不同状态的执行过程，而不像生
成器这样直接返回。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建生成器&lt;/strong&gt; &lt;br /&gt;
在python可以使用以下方式创建生成器： &lt;br /&gt;
1.使用yield&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.使用generator expression&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Generator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Ruby Variables</title><link href="/ruby-variables.html" rel="alternate"></link><updated>2014-03-12T11:26:35+00:00</updated><author><name></name></author><id>tag:,2014-03-12:ruby-variables.html</id><summary type="html">&lt;p&gt;ruby变量类型有其首位字符来决定，分类如下：&lt;br /&gt;
$      全局变量&lt;br /&gt;
@      实例变量&lt;br /&gt;
@@     类变量，在module中定义的模块变量可被所有包含该module的类所访问&lt;br /&gt;
[a-z]  局部变量&lt;br /&gt;
[A-Z]  常量&lt;br /&gt;
self   伪变量，永远指向当前正执行着的对象或未初始化变量的空值nil  &lt;/p&gt;</summary></entry><entry><title>Javascript Tips</title><link href="/javascript-tips.html" rel="alternate"></link><updated>2014-03-09T10:04:47+00:00</updated><author><name></name></author><id>tag:,2014-03-09:javascript-tips.html</id><summary type="html">&lt;p&gt;&lt;strong&gt; Append an array to existing Array &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;``` javascript Append an array to existing Array 
var a = [1,2,3];
var b = [4,5,6];
Array.prototype.push.apply(a,b);
// a contains [1,2,3,4,5,6]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="nx"&gt;And&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;same&lt;/span&gt; &lt;span class="nx"&gt;but&lt;/span&gt; &lt;span class="nx"&gt;cancat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;creates&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt; &lt;span class="nx"&gt;Prototype&lt;/span&gt; &lt;span class="nx"&gt;push&lt;/span&gt; &lt;span class="nx"&gt;append&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;existing&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="nx"&gt;itself&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="nx"&gt;Define&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;which&lt;/span&gt; &lt;span class="nx"&gt;takes&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="nx"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;an&lt;/span&gt; &lt;span class="nx"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;same&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="nx"&gt;separated&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;

&lt;span class="err"&gt;```&lt;/span&gt; &lt;span class="nx"&gt;javascript&lt;/span&gt; &lt;span class="nx"&gt;separated&lt;/span&gt; &lt;span class="nx"&gt;by&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;space&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;spacify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt; Pass string argument to &lt;em&gt;console.log()&lt;/em&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt; Prefix all logged messages with &lt;em&gt;"(app)"&lt;/em&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(app)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Notebooks of the Mind</title><link href="/notebooks-of-the-mind.html" rel="alternate"></link><updated>2013-05-31T23:26:20+00:00</updated><author><name></name></author><id>tag:,2013-05-31:notebooks-of-the-mind.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;These incessant dialectical movements -- between process and
  product, person and society, one modality and another, intention and
  expression --are the core of the creative process.&lt;/li&gt;
&lt;li&gt;Albert Einstein describes some of his ways of thinking: The words or
  the language, as they are written or spoken, do not seem to play any
  role in my mechanisms of thought. The physical entities which seem
  to serve as elements in thought are certain sings and more or less
  clear images which can be voluntarily reproduced or combined.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Sources of Thought&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From the beginnings of life, the inward flow of sensations and
  experiences is organized by the brain in a variety of ways. The
  transformation of what is heard, seen, or touched is dependent upon
  the skill of the human mind in representing events as images, as
  inner speech, as kinesthetic symbols. Through these varied forms or
  languages, the consequences or meanings of these experiences are
  stored.&lt;/li&gt;
&lt;li&gt;Invisible tools that help transform a gifted young person into a
  productive artist or scientist: Some individuals first approach
  their task externally, by exploring forms rather than their own
  personal sources, Others struggle with their inner experience, which
  drives them toward exploring their artistic world.&lt;/li&gt;
&lt;li&gt;Part of the despair and excitement that characterizes the early
  years of creative individuals is linked to their efforts to bridge
  the gap between their sense of purpose and its fulfillment. The
  first and most powerful sign that an individuals is commuted to a
  life of creative endeavors is his or her sense of intensity: the
  need to see, explore, understand, experience, and to go beyond what
  is already known. All of this is part of the development of
  invisible tools.&lt;/li&gt;
&lt;li&gt;Among the invisible tools of creative individuals is their ability
  to hold on to the specific texture of their past. This ability was
  described in fine detail by Stephen Spender in his well-known essay
  on creativity. He suggested that poets do not forget their
  sense-impressions; they know how to record, both mentally as well as
  in notebooks, the facts and shapes of their existence.&lt;/li&gt;
&lt;li&gt;The creative use of one's past requires a memory that is both
  powerful and selective.&lt;/li&gt;
&lt;li&gt;The great Russian musician believed that patience was an essential
  aspect of his sustained creativity. While he treasured his intense
  moments of musical inspiration, he also knew that the music he
  created during these short bursts of time needed expansion and
  re-working.&lt;/li&gt;
&lt;li&gt;One of the most demanding aspects of creative discipline is the
  revision process: artists and scientists clarify their condensed
  thoughts through the successive drafts (or versions) of their work.
  The process is like a dialogue between the artist and his or her
  product.&lt;/li&gt;
&lt;li&gt;In attempting to answer the question what is creative thought? one
  aspect of the answer -- the notion of synthesis -- emerges from the
  accounts of creative individuals and from the analyses of research
  studies. Of greatest importance in the thought activity of artists
  and scientists is their pulling together of ideas, images,
  disarrayed facts and fragments of experience, which have previously
  been apprehended by them as separated in time and space, into an
  integrated word. it is this synthesis that most concerns me in this
  discussion: the joining of rapid bursts of thought with a regime of
  disciplined work.&lt;/li&gt;
&lt;li&gt;Generally speaking, the germ of a future composition comes suddenly
  and unexpectedly, Tchaikovsky wrote. The success of working with
  such "thought-train" -- in Hannah Ardent's expression -- depends on
  a fully prepared mind. But the mental powers necessary to extend
  one's understanding and to transform one 's thoughts into creative
  works mature slowly. The furtherance and expansion of the talents of
  gifted individual requires not only the mastery of his or her craft,
  but also a strong and enduring sense of self.&lt;/li&gt;
&lt;li&gt;Howard Grubber described the creative individual's life as a
  "self-regenerating system": A creative moments is part of a longer
  creative process, which in its turn is part of a creative life. How
  are such lives lived? How can I express this peculiar idea that such
  an individual must be a self-generating system? Not a system that
  comes to rest when it has done good work, but one that urges itself
  onward. And yet, not a run-away system that accelerates its activity
  to the point where it burns itself out in one great flash. The
  system regulates the activity and the creative acts regenerate the
  system. The creative life happens in a being who can continue to
  work.&lt;/li&gt;
&lt;li&gt;The mind at word is engaged in diverse efforts at unification.
  Energy and commitment are needed in shaping the inner shorthand of
  ideas into public ally available word -- the joining of thought and
  realization -- which is sustained in a variety of ways: by "the
  courage to create," by a well-honed discipline and a fully-prepared
  mind, by the artist's passion for his or her task. The hope that is
  essential for regeneration is nourished by the emotional support and
  intellectual sharing of those "places, people and things," as
  Santayana has said, upon whose support the creative individual
  depends.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;The languages of the Mind&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visual Thinking: It is the representation of knowledge in the form
  of structures in motions; it is the study of relationships of these
  forms and structures; it is the flow of images as pictures,
  diagrams, explanatory models, orchestrated paintings of immense
  ideas, and simple gestures; it is work with schemes and structures
  of the mind.&lt;/li&gt;
&lt;li&gt;Verbal Thinking: The inner language of thought differs from the
  language used for communicative exchanges in its rapidity, in its
  condensed form, and in its functions. In the maintenance of human
  contact, language may indeed be "stabilizing". But language has
  multiple functions and forms, some of which are more suited for
  discovery and others more suited for the construction and
  maintenance of shared experiences, beliefs, and knowledge.&lt;/li&gt;
&lt;li&gt;The Languages of Emotional: Music and Dance.&lt;/li&gt;
&lt;li&gt;Scientific Thinking: Metaphors, analogies, and the delineation of
  new patterns are the stuff of insights. These are then tested, and
  weighed for their levels of truthfulness by the application of the
  scientists' research. Logic and metaphor, quick thought and lengthy
  periods of evaluation characterize the creative endeavor, though the
  very act of writing and coupling such words demands a contradiction.
  At times the struggle with an idea is incredibly lengthy while its
  assessment -- as in the case of building the model of the double
  helix -- can be quite rapid.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Conclusion: The Creativity of Thinking&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Thinking--how shall I define it? It is a soundless dialogue, it is the
weaving of patterns, it is a search for meaning. The activity of
thought contributes to and shapes all that is specifically human.&lt;/p&gt;</summary></entry><entry><title>Mastery</title><link href="/mastery.html" rel="alternate"></link><updated>2012-12-26T22:58:58+00:00</updated><author><name></name></author><id>tag:,2012-12-26:mastery.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mastery is not about perfection. It’s about a process, a journey.
  The master is the one who stays on the path day after day, year
  after year. The master is the one who is willing to try, and fail,
  and try again, for as long as he or she lives.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you hit a challenge, go back to the basics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;To practice regularly, even when you seem to be getting nowhere,
  might at first seem onerous. But the day eventually comes when
  parcticing becomes a treasured part of your life. You settle into it
  as if into your favorite easy chair, unaware of time and the
  turbulence of the world..It will still be there ofr you tomorrow. It
  will never go away.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;The face Of Mastery&lt;/em&gt;
  Goals and contingencies are important. But they exist in the future
  and the past, beyond the pale of the sensory realm. Practice, the
  path of mastery, exists only in the present. You can see it, hear
  it, smell it, feel it. To love the plateau is to love the eternal
  now, to enjoy the inevitable spurts of progress and the fruits of
  accomplishment, then serenely to accept the new plateau that waits
  just beyond them. To love the plateau is to love what is most
  essential and enduring in your life.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Five Master Keys&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Instruction&lt;/li&gt;
&lt;li&gt;Practice&lt;/li&gt;
&lt;li&gt;Surrender&lt;/li&gt;
&lt;li&gt;Intentionality&lt;/li&gt;
&lt;li&gt;The Edge&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Tools For Mastery&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why solutions fail, and what to do about it&lt;/li&gt;
&lt;li&gt;When you make a change, first you get better, then backslide.
   Backsliding is a universal experience. Every one of us resists
   significant change, no matter whether it's for the worse or for the
   better. Our body, brain, and behavior have a built-in tendency to
   stay the same within rather narrow limits, and to snap back when
   changed--and it's a very good thing they do.&lt;/li&gt;
&lt;li&gt;The condition of equilibrium, the resistance to change, is called
   homeostasis. It characterizes all self-regulating systems, from a
   bacterium to a frog to a human individual to a family to an
   organization to an entire culture--and it applies to psychological
   states and behavior as well as to physical functioning.&lt;/li&gt;
&lt;li&gt;Homeostasis doesn't distinguish between what you would call change
   for the better and change for the worse. It resists all change.
   After twenty years without exercise, your body regards a sedentary
   style of life as "normal"; the beginning of a change for the better
   is interpreted as a threat.&lt;/li&gt;
&lt;li&gt;Five guidelines focused on mastery, they could also be applied to
   any change in your life.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Be aware of the way homeostasis works.&lt;/em&gt; This might be the most
      important guideline of all. Expect resistance and backlash.
      Realize that when the alarm bells start ringing, it doesn't
      necessarily mean you're sick or crazy or lazy or that you've
      made a bad decision in embarking on the journey of mastery. In
      fact, you might take these signals as an indication that your
      life is definitely changing--just what you've wanted. Of course,
      it might be that you have started something that's not right for
      you; only you can decide. But in any case, don't panic and give
      up at the first sign of trouble.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Be willing to negotiate with your resistance to change.&lt;/em&gt; So
      what should you do when you run into resistance, when the red
      lights flash and the alarm bells ring? Well, you don't back off,
      and you don't bull you way through. Negotiation is the ticket to
      successful long-term change in everything from increasing your
      running speed to transforming your organization. The
      long-distance runner working for a faster time on a measured
      course negotiates with homeostasis by using pain not as an
      adversary but as the best possible guide to performance. Th
      change-oriented manager keeps his or her eyes and ears open for
      signs of dissatisfaction or dislocation, then plays the edge of
      discontent, the inevitable escort of transformation.
      The fine art of playing the edge in this case involves a
      willingness to take one step back for every two forward,
      sometimes vice versa. It also demands a determination to keep
      pushing, but not without awareness. Simply turning off your
      awareness to warnings deprives you of guidance and risks
      damaging the system. Simply pushing your way through despite the
      warning signals increases the possibility of backsliding.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Develop a support system.&lt;/em&gt; You can do it alone, but it helps a
      great deal to have other people with who you can share the joys
      and perils of the change you're making. The best support system
      would involve people who have gone through or are going through
      a similar process, people who can tell their own stories of
      change and listen to yours, people who will brace you up when
      you start to backslide and encourage you when you don't.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Follow a regular practice.&lt;/em&gt; People embarking on any type of
      change can gain stability and comfort through practicing some
      worthwhile activity on a more or less regular basis, not so much
      for the sake of achieving an external goal as simply for its own
      sake. A traveler on the path of mastery is again fortunate, for
      practice in this sense is the foundation of the path itself. The
      circumstances are particularly happy in case you've already
      established a regular practice in something else before facing
      the challenge and change of beginning a new one. It's easier to
      start applying the principles of mastery to your profession or
      your primary relationship if you've already established a
      regular morning exercise program. Practice is a habit, and any
      regular practice provides a sort of underlying homeostasis, a
      stable base during the instability of change.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Dedicate yourself to lifelong learning.&lt;/em&gt; We tend to forget that
      learning is much more than book learning. To learn is to change.&lt;/li&gt;
&lt;li&gt;Get energy for mastery&lt;/li&gt;
&lt;li&gt;A human being is the kind of machine that wears out from lack of
     use. There are limits, of course, and we do need healthful rest
     and relaxation, but for the most part we gain energy by using
     energy. Often the best remedy for physical weariness is thirty
     minutes of aerobic exercise. In the same way, mental and
     spiritual lassitude is often cured by decisive action or the
     clear intention to act.&lt;/li&gt;
&lt;li&gt;Here is how to get started:&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Maintain physical fitness.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Acknowledge the negative and accentuate the positive.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Try telling the truth.&lt;/em&gt; Truth-telling works best when it
   involves revealing your own feelings, not when used to insult
   others and to get your own way. All in all, it has a lot going
   for it--risk, challenge, excitement, and the release of all of
   that energy.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Honor but don't indulge your own dark side.&lt;/em&gt; Anger, for
   instance, contains a great deal of energy. So when your feel
   your anger rising, you can choose to go and work furiously on a
   favorite project, or to transmute the beneath your anger to
   fuel that you can use on your journey of mastery.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Set your priorities.&lt;/em&gt; Before you can use your potential
   energy, your have to decide what you're going to do with it.
   And in making any choice, you face a monstrous fact: to move in
   one direction, you must forgo all others. To choose one goal is
   to forsake a very number of other possible goals.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Make commitments.&lt;/em&gt; Take action. The journey of mastery is
   ultimately goalless; you take the journey for the sake of the
   journey itself. But, as I've pointed out, there are interim
   goals along the way, the first of which is simply starting the
   journey. And there's nothing quite so immediately energizing on
   any journey as the intermediate goal of a tough, firm
   deadline--as is known to anyone who has faced an opening-night
   curtain, a business-deal closing date, or a definite press time
   for an article or book.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Get on the path of mastery and stay on it.&lt;/em&gt;
  Over the long haul, there's nothing like the path of mastery to
  lead you to an energetic life. A regular practice not only
  elicits energy but tames it. Without the firm underpinnings of a
  practice, deadlines can produce violent swings between frantic
  activity and collapse. On the master's journey, you can learn to
  put things in perspective, to keep the flow of energy going
  during low moments as well as high. You also learn that you
  can't hoard energy; you can't build it up by not using it.
  Adequate rest is, of course, a part of the master's journey,
  but, unaccompanied by positive action, rest may depress you.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>The Art of Learning</title><link href="/the-art-of-learning.html" rel="alternate"></link><updated>2012-12-06T23:20:30+00:00</updated><author><name></name></author><id>tag:,2012-12-06:the-art-of-learning.html</id><summary type="html">&lt;p&gt;追求卓越的关键在于，要坚持充满活力、长期的学习过程，不再满足于原地踏步、
平平庸庸。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;划小圈&lt;/em&gt;：自己的最佳状态。 　　 &lt;/li&gt;
&lt;li&gt;&lt;em&gt;漩涡效应：&lt;/em&gt; 在体育比赛当中我们经常会发现一个现象，原本势均力敌双方
   中的一方在犯了一个错误之后往往连续失分，最后彻底溃败。大部分时候 双
   方对峙的差距其实只是一线之隔，当情况变化之后我们可能丧失了优势，而
   我们的内心往往并不能很好地接受这个变化。这个时候心理的微妙变化往往
   会使得我们 的表现大失水准。我们往往不能理性地面对沉默资本，我们应该
   尽可能地去冷静，去深呼吸，去接受这个变化。 　　&lt;/li&gt;
&lt;li&gt;&lt;em&gt;整理理论、渐进理论：&lt;/em&gt; 其实这是我们讨论的最欢乐的一部分。究竟是不是
   有天才？所谓的天才究竟是天生为主还是后天为主？究竟该坚持结果主义 还
   是过程主义？我个人觉得整体理论只是作为一个反例出现在书中，那种自以
   为是的状态，自以为自己高过别人的心理是没办法持续突破自己的。只有坦
   然地接纳自 己的强项和弱项，在每次比赛之后总结得失，才是真正可以内化
   的修炼。更重要的是，这是我们个人与企业突破天花板的唯一方式。当你敢
   于犯错，乐于失败的时 候，才会是你成长最大的时候。真正值得在乎的是成
   长，是不是真的可以成为一个领域的天才那肯定是后话了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;学习的方法的核心：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;要钻研微观的细节事物从而来理解是什么促成了宏观上的问题。我们面对的阻
  碍就是我们生活在一种关注度不足的文化里面。&lt;/p&gt;
&lt;p&gt;首先从基础开始，通过理解训练的原则所在来建立扎实的基础，然后在个人倾
  向的指导下拓宽并完善自己的技能，同时和你认为是艺术的必要实质的东西在
  抽象层面上保持联系。结果就是你可以更好地吸收各种知识，使得这些从个人
  的着重点中拓展开来的知识相互连接成一个网络。&lt;/p&gt;
&lt;p&gt;让时间慢下来。练习内在的风度和意识思维到放松，后者可以让非意识自由流
  淌。这是一种比较少见但却是被极度误解到思维状态，经提炼之后就会从意识
  思维到细微整合到自由到非意识过程。这个想法就是把主要角色从意识思维转
  到非意识思维身上，但又不会丢失了意识所能够达到到准确性。关于各种身体
  到比喻，你可以想象一下你自己到的视觉。我们用你到视觉重心来代表意识思
  维，用你的周围视觉代表你的非意识思维。有可能你坐下来看一本书，你看到
  的是几个字。现在放松你的眼睛，然后启动你的周围视觉，你的视觉意识会吸
  收得更多，你能看到很多周边的事物。现在，下一步就是再次把注意力集中在
  这本书上，同时维持住周边意识。如果思维足够放松，你就可以准确迅速地处
  理你面前的事情，同时对你到周边事情仍保持明确到意识。因此，必须让非意
  识思维流动起来，同时意识思维也要随之领导和跟随，从而对细节进行筛选，
  使各事物有效运行并且可以做出准确的数学计算。让时间感觉变慢需要我们本
  能地把注意力集中到一小块重要信息上，这样我们的处理器（意识）就可以将
  它放大分解。这种训练有素的思维状态共享 这个有意识的重点小区域。在我
  们的选择准则中，我们通过把所有周围的信息转变成非意识的统一数据而不是
  通过选择忽略它来培养这种经验。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要学会专注（比如对付噪音） &lt;/li&gt;
&lt;li&gt;要学着心平气和对待一切已发生的事情；（不要紧绷、抵抗，而是静静的接受。"做草鞋"的故事很是经典） &lt;/li&gt;
&lt;li&gt;学着将这些事情为我所用（比如学着根据歌曲的节奏来思考）； &lt;/li&gt;
&lt;li&gt;学着做到完全自给自足，创造出我们自己的地震； 
　　 &lt;/li&gt;
&lt;li&gt;对于最基本的技能要"划小圈" &lt;/li&gt;
&lt;li&gt;"把大的东西分解成各个细节的东西，挖掘技能的实质所在，然后有效地压缩
   技能的外在表现同时又紧紧围绕技能的内在实质。一段时间之后，广度就会
   慢慢缩小而力量则会逐渐增加。"&lt;/li&gt;
&lt;li&gt;"最精深的技巧往往建立在最简单原始的原理之上。" &lt;/li&gt;
&lt;li&gt;"在象棋和武术中，选手会倾向于使用各种花哨的技巧而忽视轻微的吸收和完
   善，其实它们要比学到的招式数量重要得多。"&lt;/li&gt;
&lt;li&gt;"我们能成为顶尖选手并没有什么秘诀，而是对可能是基本技能的东西有更深的理解。" &lt;/li&gt;
&lt;li&gt;"每天都要学得更深一点而不是更广一点，因为学得更深可以让我们把我们潜
   力中那些看不到、感受不到但又极具创造力的部分挖掘出来。"
　　 &lt;/li&gt;
&lt;li&gt;要足够熟练到形成无意识思维 
　　 &lt;/li&gt;
&lt;li&gt;这也是为什么真正的大师很少谈起基本原理的原因。就好像在一场专业演出
   中，伟大的钢琴家或小提琴家不会考虑单个乐符，而 是完美地将其全部演绎
   出来。事实上，在演奏贝多芬的《第五交响乐》时如果只想着某个C调的话，
   可能会出状况，因为整个乐感可能就没了。或者是给初学者写一 本象棋指导
   书的画，就必须把潜意识中的所有东西都给挖掘出来，不得不对自己的象棋
   知识进行分解，然而多年来，对于那些核心信息我已经形成了一套严密的融
   合体系。&lt;/li&gt;
&lt;li&gt;大师已经把深奥的原理内化了，令人惊讶的决定只是出于直觉。如果我们使
   用它的时候不再需要前思后想，这些知识就已经深深扎根于我们的头脑。接
   着我们能向前再次飞跃，用我们所知的一切继续向前一两步。
　　 &lt;/li&gt;
&lt;li&gt;反复练习：很多人都会说这句话是老调长叹，我们谁都知道这个道理。不！
   如果你没有这么做的话，说明你并没有真的懂这句话！&lt;/li&gt;
&lt;li&gt;寻找联系：一个例子就是，棋手水平越高，迅速发现棋子与棋子之间相关联
   的逻辑形式的能力就越强。在象棋大师脑海中存在的信息组块使得他能够用
   更少的有意识 思维观察到更多的东西。而且他有一个更加先进的导航体系，
   所以他能够对自己所拥有的广泛知识进行快速筛选。
　　 &lt;/li&gt;
&lt;li&gt;随心所欲不逾矩 &lt;/li&gt;
&lt;li&gt;处在高水平中的每个人都对象棋有很多深入的了解，而成就伟大的原因很大
   部分就在于内在的风度和意识思维的放松，后者可以让非意识自由流淌。也
   就是把主要角色从意识思维转到非意识思维身上，但又不会丢失了意识所能
   达到的准确性。&lt;/li&gt;
&lt;li&gt;我在比赛中最关键的一个因素就是我的棋风，它与我的个性完全保持了一致。
   我根本不受内在矛盾的束缚。&lt;/li&gt;
&lt;li&gt;冠军几乎毫无例外的都是这样的一些人，它们知道自己独有的优势，从而形
   成了自己特有的风格，而且比别人更善于把比赛引向有利于自己的方向。&lt;/li&gt;
&lt;li&gt;心理的交锋几乎是所有高水平交手过程的核心。 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们永远无法预测结局，无论重要的比赛、冒险还是爱情。我们唯一可以肯定
  的只有出乎意料。不管做了多么完全的准 备，在生活的场景中，我们总会处
  于陌生的境地。我们也许会无法冷静，失去理智，感觉似乎整个世界都针对我
  们。在这个时候，我们所要做的要付出加倍的努力， 要变现的比预想的更好。
  关键在于准备好随机应变，准备好在所能想象的高压下发挥创造力!真正的掌
  握需要自己发现能够引起共鸣的嬉戏，并将其融合进来，直至 成为一体，这
  样我们才能随心所欲地驾驭它！&lt;/p&gt;
&lt;p&gt;成功的唯一方法是承认现实，超越现实，鼓起勇气并善用之！只有当我们工作
  超越熟练阶段而成为自身的一种表达的时候，学习才成为一门真正的艺术。&lt;/p&gt;</summary></entry></feed>